// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ingredients   Ingredient[]
  recipes       Recipe[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ingredient {
  id           String             @id @default(cuid())
  name         String
  unit         String
  unitPerPrice Float?
  price        Float?
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipes      RecipeIngredient[]

  @@index([userId])
}

model Recipe {
  id     String @id @default(cuid())
  userId String

  name String
  type String

  ingredients RecipeIngredient[]
  photos      RecipePhoto[]
  steps       RecipeStep[]
  tags        RecipeTag[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model RecipeIngredient {
  amount       Float
  recipeId     String
  ingredientId String
  recipe       Recipe                 @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient             @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  steps        RecipeIngredientStep[]

  @@id([recipeId, ingredientId])
  @@index([recipeId])
  @@index([ingredientId])
}

model RecipeStep {
  id          String                 @id @default(cuid())
  description String                 @db.Text
  recipeId    String
  recipe      Recipe                 @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredients RecipeIngredientStep[]

  @@index([recipeId])
}

model RecipeIngredientStep {
  recipeId     String
  ingredientId String
  stepId       String
  step         RecipeStep       @relation(fields: [stepId], references: [id], onDelete: Cascade)
  ingredient   RecipeIngredient @relation(fields: [recipeId, ingredientId], references: [recipeId, ingredientId], onDelete: Cascade)

  @@id([recipeId, ingredientId, stepId])
  @@index([recipeId, ingredientId])
  @@index([stepId])
}

model RecipeTag {
  id       String @id @default(cuid())
  recipeId String
  name     String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, name])
  @@index([recipeId])
}

model RecipePhoto {
  id       String @id @default(cuid())
  url      String
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}
